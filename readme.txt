函数：
1、命名参数：调用函数时可以为参数指定名称，指定名称后参数的顺序可以任意写，不受函数声明的参数顺序限制。
2、默认参数值：函数声明时可以默认的为参数带上默认值，在函数调用时可以省略参数使用默认值。
3、顶层函数和属性：
4、给别人的类添加方法：扩展函数和属性，扩展的函数不可覆写，扩展的属性需要自己写setter、getter函数。
5、可变参数：让函数支持任意数量的参数，使用关键字"vararg"来声明函数的参数为可变参数。
6、中缀调用：infix声明的函数可以使用中缀符号调用。例如：mapOf(1 to "one",2 to "two")


类、对象、接口
1、Kotlin中的内部类默认为嵌套类（即：Java的静态内部类，不持有对外部类的引用），要使用内部类需要使用“inner”关键字来声明修饰内部类
在Kotlin中引用外部类实例，需要使用  this@Outer 来访问外部类
2、密封类（sealed类）：定义受限的类继承结构,对可能创建的子类做出严格的限制。所有的直接子类必须嵌套在父类中
3、equals与hashcode的契约：如果两个对象相等，它们必须有着相同的hash值。
4、委托关键字"by"
5、"object"关键字：将声明一个类与创建一个实例结合起来。这个关键字定义一个类并同时创建一个实例（换句话说就是一个对象）。
对象声明：定义单例的一种方式
对象表达式：用来代替Java的匿名内部类

泛型
1、实化类型：
可以使用：
用在类型检查和类型转换中（is，！is，as，as？）
使用kotlin反射API
获取相应的java.lang.Class(::class.java)
作为调用其他函数的类型实参
不可以使用：
创建指定类型参数的类的实例
调用类型参数类的伴生对象的方法
调用带实化类型参数函数的时候使用非实化类型形参作为类型实参
把类、属性或者非内联函数的类型参数标记成reified
2、协变、逆变、不变：
只读数据类型（源）是协变的；只写数据类型（汇/sink）是逆变的。可读可写类型应是“不变”的。
类型构造符→对输入类型是逆变的而对输出类型是协变的
对于大部分的方法子类化规则来说，这要求返回值的类型必须更具体，也就是协变，而且接受更宽泛的参数类型，也就是逆变

类的概念就是把数据和处理数据的代码封装成一个单一的实体。